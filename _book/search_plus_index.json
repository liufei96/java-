{"./":{"url":"./","title":"Introduction","keywords":"","body":"使用 1. 本地环境安装 安装node.js npm install gitbook-cli -g 2. 运行项目 git init 初始化一下项目 git install -y 安装下插件 git serve启动项目默认是4000端口 启动之后访问localhost:4000 powered by Gitbook该文件修订时间： 2020-07-15 00:13:23 "},"frame/spring/introduction-spring.html":{"url":"frame/spring/introduction-spring.html","title":"spring","keywords":"","body":"spring的介绍 Spring是一个开源框架，Spring是于2003年兴起的一个轻量级的Java开发框架，由Rod Johnson在其著作Expert One-On-One J2EE Development and Design中阐述的部分理念和原型衍生而来。 它是为了解决企业应用开发的复杂性而创建的。框架的主要优势之一就是其分层架构，分层架构允许使用者选择使用哪一个组件，同时为J2EE应用程序开发提供集成的框架。Spring使用基本的JavaBean来完成以前只可能由EJB完成的事情。然而，Spring的用途不仅限于服务器端的开发。从简单性、可测试性和松耦合的角度而言，任何Java应用都可以从Spring中受益。Spring的核心是控制反转(IoC)和面向切面(AOP)。简单来说，Spring是一个分层的JavaSE/EEfull-stack(一站式)轻量级开源框架。 为什么说Spring是一个一站式的轻量级开源框架呢？EE开发可分成三层架构，针对JavaEE的三层结构，每一层Spring都提供了不同的解决技术。 WEB层：SpringMVC 业务层：Spring的IoC 持久层：Spring的JDBCTemplate(Spring的JDBC模板，ORM模板用于整合其他的持久层框架) powered by Gitbook该文件修订时间： 2020-07-15 23:53:43 "},"frame/spring/spring.html":{"url":"frame/spring/spring.html","title":"spring核心知识","keywords":"","body":"Spring的核心内容 spring的IOC IOC（inverse of control）：控制反转 ，将对象创建的控制权交给IOC容器，应用程序中用到对象时，再从容器中获得。还有一个更确切的名字叫做DI（dependency injection）依赖注入，创建对象时根据对象之间的依赖关系根据配置自动注入依赖对象。 依赖注入的三种方式： （1）构造方法注入：即被注入对象可以通过在其构造方法中声明依赖对象的参数列表，让外部（通常是IOC容器）知道它需要哪些依赖对象，然后IOC容器会检查被注入对象的构造方法。 （2）setter方法注入：即当前对象只需要为其依赖对象所对应的属性添加setter方法，IOC容器通过此setter方法将相应的依赖对象设置到被注入对象的方式即setter方法注入。 （3）接口注入：接口注入有点复杂，被注入对象如果想要IOC容器为其注入依赖对象，就必须实现某个接口，这个接口提供一个方法，用来为被注入对象注入依赖对象，IOC容器通过接口方法将依赖对象注入到被注入对象中去。相对于前两种注入方式，接口注入比繁琐和死板，被注入对象就必须专声明和实现另外的接口。 默认情况下,IOC容器中创建的对象都是单列对象 bean标签上添加scope=”prototype”设置非单例对象。 \\默认情况下，创建容器对象时，会自动创建容器中的对象**。单例的并且非懒加载对象（饿汉式，用不用先创建放在那）。只有在第一次从容器中获得该对象，才会创建。 spring的AOP 什么是AOP？ AOP：Aspect Oriented Programming 面向切面编程。 面向切面编程(也叫面向方面)：Aspect Oriented Programming(AOP),是目前软件开发中的一个热点。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。 AOP是OOP的延续，是（Aspect Oriented Programming）的缩写，意思是面向切面（方面）编程。 主要的功能是：\\日志记录，性能统计，安全控制，事务处理，异常处理**等等。 主要的意图是：将日志记录，性能统计，安全控制，事务处理，异常处理等代码从业务逻辑代码中划分出来，通过对这些行为的分离，我们希望可以将它们独立到非指导业务逻辑的方法中，进而改变这些行为的时候不影响业务逻辑的代码。 可以通过预编译方式和运行期动态代理实现在不修改源代码的情况下给程序动态统一添加功能的一种技术。AOP实际是GoF设计模式的延续，设计模式孜孜不倦追求的是调用者和被调用者之间的解耦，AOP可以说也是这种目标的一种实现。 假设把应用程序想成一个立体结构的话，OOP的利刃是纵向切入系统，把系统划分为很多个模块（如：用户模块，文章模块等等），而AOP的利刃是横向切入系统，提取各个模块可能都要重复操作的部分（如：权限检查，日志记录等等）。由此可见，AOP是OOP的一个有效补充。 注意：AOP不是一种技术，实际上是编程思想。凡是符合AOP思想的技术，都可以看成是AOP的实现。 关注点 关注点：重复代码就叫做关注点； 切面 关注点形成的类，就叫切面(类)！ 面向切面编程，就是指 对很多功能都有的重复的代码抽取，在运行的时候往业务方法上动态植入“切面类代码”。 切入点 执行目标对象方法，动态植入切面代码。 可以通过切入点表达式，指定拦截哪些类的哪些方法； 给指定的类在运行的时候植入切面类代码。 AOP底层的实现原理 静态代理和动态代理 静态代理需要生成目标代理对象---不推荐 动态代理是不需要生成目标代理对象的 动态代理分为jdk动态代理和cglib jdk需要接口，动态dialing只需要自雷实现，基于java的反射 cglib是基于ASM字节码包装的一个类库。 ASM字节码： powered by Gitbook该文件修订时间： 2020-07-16 00:30:43 "}}